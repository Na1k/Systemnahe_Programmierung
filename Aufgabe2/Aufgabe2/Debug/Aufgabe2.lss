
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f9  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001004  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000350  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>


int main(void)
{
	DDRB  |= (1 << DDB0) | (1 << DDB1);		//B0 & B1 to OUTPUT
  80:	84 b1       	in	r24, 0x04	; 4
  82:	83 60       	ori	r24, 0x03	; 3
  84:	84 b9       	out	0x04, r24	; 4
	DDRB  &= ~(1 << DDB2);					//B2 to INPUT
  86:	84 b1       	in	r24, 0x04	; 4
  88:	8b 7f       	andi	r24, 0xFB	; 251
  8a:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PORTB0);					//B0 ON
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~(1 << PORTB1);				//B1 OFF
  92:	85 b1       	in	r24, 0x05	; 5
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	85 b9       	out	0x05, r24	; 5
	
	DDRB |= (1 << DDB5);
  98:	84 b1       	in	r24, 0x04	; 4
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1 << PORTB5);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	85 b9       	out	0x05, r24	; 5

	
	if(PORTB0 == DDB0){
		PORTB |= (1 << PORTB5);
  a4:	85 b1       	in	r24, 0x05	; 5
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	ff cf       	rjmp	.-2      	; 0xaa <main+0x2a>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>


Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000152  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f8  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000683  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00001133  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	CLEAR_BIT(PORTB, P2);
	CLEAR_BIT(PORTB, P3);
}
*/
int main(void)
{    
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	c0 56       	subi	r28, 0x60	; 96
  a0:	d1 09       	sbc	r29, r1
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	f8 94       	cli
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	cd bf       	out	0x3d, r28	; 61
		int ledStates[12][4] =
  ac:	80 e6       	ldi	r24, 0x60	; 96
  ae:	e0 e0       	ldi	r30, 0x00	; 0
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	de 01       	movw	r26, r28
  b4:	11 96       	adiw	r26, 0x01	; 1
  b6:	01 90       	ld	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	8a 95       	dec	r24
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x20>
		};
	while (1) 
    {
		//Start Links --> Rechts
		//12 Vorgänge
		for(int i=0; i<LED_COUNT; i++){
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	40 c0       	rjmp	.+128    	; 0x144 <main+0xae>
			applyLED(ledStates[i]);
  c4:	fa 01       	movw	r30, r20
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	8c 0f       	add	r24, r28
  d8:	9d 1f       	adc	r25, r29
  da:	e8 0f       	add	r30, r24
  dc:	f9 1f       	adc	r31, r25
	toLeft()
	toRight()
*/

static inline void setOutput(int portNum){	//Output
	DDRB |= (1 << portNum);
  de:	64 b1       	in	r22, 0x04	; 4
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	9c 01       	movw	r18, r24
  e6:	00 80       	ld	r0, Z
  e8:	02 c0       	rjmp	.+4      	; 0xee <main+0x58>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	0a 94       	dec	r0
  f0:	e2 f7       	brpl	.-8      	; 0xea <main+0x54>
  f2:	36 2f       	mov	r19, r22
  f4:	32 2b       	or	r19, r18
  f6:	34 b9       	out	0x04, r19	; 4
}
static inline void switchOn(int portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, portNum);
  f8:	35 b1       	in	r19, 0x05	; 5
  fa:	23 2b       	or	r18, r19
  fc:	25 b9       	out	0x05, r18	; 5
	toLeft()
	toRight()
*/

static inline void setOutput(int portNum){	//Output
	DDRB |= (1 << portNum);
  fe:	64 b1       	in	r22, 0x04	; 4
 100:	9c 01       	movw	r18, r24
 102:	02 80       	ldd	r0, Z+2	; 0x02
 104:	02 c0       	rjmp	.+4      	; 0x10a <main+0x74>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <main+0x70>
 10e:	36 2f       	mov	r19, r22
 110:	32 2b       	or	r19, r18
 112:	34 b9       	out	0x04, r19	; 4
	setOutput(portNum);
	SET_BIT(PORTB, portNum);
}
static inline void switchOff(int portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, portNum);
 114:	35 b1       	in	r19, 0x05	; 5
 116:	20 95       	com	r18
 118:	23 23       	and	r18, r19
 11a:	25 b9       	out	0x05, r18	; 5
}
static inline void disconnect(int portNum1, int portNum2){	//set Port as Input
	DDRB &= ~(1 << portNum1)|~(1 << portNum2);
 11c:	24 b1       	in	r18, 0x04	; 4
 11e:	bc 01       	movw	r22, r24
 120:	04 80       	ldd	r0, Z+4	; 0x04
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x92>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0x8e>
 12c:	06 80       	ldd	r0, Z+6	; 0x06
 12e:	02 c0       	rjmp	.+4      	; 0x134 <main+0x9e>
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	0a 94       	dec	r0
 136:	e2 f7       	brpl	.-8      	; 0x130 <main+0x9a>
 138:	86 23       	and	r24, r22
 13a:	80 95       	com	r24
 13c:	82 23       	and	r24, r18
 13e:	84 b9       	out	0x04, r24	; 4
		};
	while (1) 
    {
		//Start Links --> Rechts
		//12 Vorgänge
		for(int i=0; i<LED_COUNT; i++){
 140:	4f 5f       	subi	r20, 0xFF	; 255
 142:	5f 4f       	sbci	r21, 0xFF	; 255
 144:	4c 30       	cpi	r20, 0x0C	; 12
 146:	51 05       	cpc	r21, r1
 148:	0c f4       	brge	.+2      	; 0x14c <main+0xb6>
 14a:	bc cf       	rjmp	.-136    	; 0xc4 <main+0x2e>
 14c:	b8 cf       	rjmp	.-144    	; 0xbe <main+0x28>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>

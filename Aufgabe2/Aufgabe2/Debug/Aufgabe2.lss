
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  0000022e  000002a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000302  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6f  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fc  00000000  00000000  00000e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002df  00000000  00000000  000014ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000415  00000000  00000000  00001804  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024c  00000000  00000000  00001c19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
		clearAll();
	}
}

static inline void rightToLeft(){
	for(int i=(LED_COUNT-1); i>=0; i--){
  96:	2b e0       	ldi	r18, 0x0B	; 11
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	55 c0       	rjmp	.+170    	; 0x146 <main+0xb0>
		applyLED(LED_STATES[i]);
  9c:	f9 01       	movw	r30, r18
  9e:	ee 0f       	add	r30, r30
  a0:	ff 1f       	adc	r31, r31
  a2:	ee 0f       	add	r30, r30
  a4:	ff 1f       	adc	r31, r31
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	e0 50       	subi	r30, 0x00	; 0
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  ae:	64 b1       	in	r22, 0x04	; 4
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	ac 01       	movw	r20, r24
  b6:	00 80       	ld	r0, Z
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x28>
  ba:	44 0f       	add	r20, r20
  bc:	55 1f       	adc	r21, r21
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x24>
  c2:	46 2b       	or	r20, r22
  c4:	44 b9       	out	0x04, r20	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
  c6:	65 b1       	in	r22, 0x05	; 5
  c8:	ac 01       	movw	r20, r24
  ca:	00 80       	ld	r0, Z
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x3c>
  ce:	44 0f       	add	r20, r20
  d0:	55 1f       	adc	r21, r21
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <main+0x38>
  d6:	46 2b       	or	r20, r22
  d8:	45 b9       	out	0x05, r20	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  da:	64 b1       	in	r22, 0x04	; 4
  dc:	ac 01       	movw	r20, r24
  de:	02 80       	ldd	r0, Z+2	; 0x02
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x50>
  e2:	44 0f       	add	r20, r20
  e4:	55 1f       	adc	r21, r21
  e6:	0a 94       	dec	r0
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <main+0x4c>
  ea:	46 2b       	or	r20, r22
  ec:	44 b9       	out	0x04, r20	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
  ee:	55 b1       	in	r21, 0x05	; 5
  f0:	bc 01       	movw	r22, r24
  f2:	02 80       	ldd	r0, Z+2	; 0x02
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x64>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <main+0x60>
  fe:	46 2f       	mov	r20, r22
 100:	40 95       	com	r20
 102:	45 23       	and	r20, r21
 104:	45 b9       	out	0x05, r20	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1) & ~(1 << *portNum2);
 106:	44 b1       	in	r20, 0x04	; 4
 108:	bc 01       	movw	r22, r24
 10a:	04 80       	ldd	r0, Z+4	; 0x04
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x7c>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0x78>
 116:	06 80       	ldd	r0, Z+6	; 0x06
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0x88>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <main+0x84>
 122:	86 2b       	or	r24, r22
 124:	80 95       	com	r24
 126:	84 23       	and	r24, r20
 128:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	4f ef       	ldi	r20, 0xFF	; 255
 12c:	83 ec       	ldi	r24, 0xC3	; 195
 12e:	99 e0       	ldi	r25, 0x09	; 9
 130:	41 50       	subi	r20, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x9a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xa4>
 13a:	00 00       	nop
	disconnect(&array[2], &array[3]);
}

//setup the "movement" of the lights
static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
 13c:	84 b1       	in	r24, 0x04	; 4
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	84 b9       	out	0x04, r24	; 4
		clearAll();
	}
}

static inline void rightToLeft(){
	for(int i=(LED_COUNT-1); i>=0; i--){
 142:	21 50       	subi	r18, 0x01	; 1
 144:	31 09       	sbc	r19, r1
 146:	33 23       	and	r19, r19
 148:	0c f0       	brlt	.+2      	; 0x14c <main+0xb6>
 14a:	a8 cf       	rjmp	.-176    	; 0x9c <main+0x6>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	43 ed       	ldi	r20, 0xD3	; 211
 150:	80 e3       	ldi	r24, 0x30	; 48
 152:	21 50       	subi	r18, 0x01	; 1
 154:	40 40       	sbci	r20, 0x00	; 0
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0xbc>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xc6>
 15c:	00 00       	nop
static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
}

static inline void leftToRight(){
	for(int i=0; i<LED_COUNT; i++){
 15e:	20 e0       	ldi	r18, 0x00	; 0
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	55 c0       	rjmp	.+170    	; 0x20e <main+0x178>
		applyLED(LED_STATES[i]);
 164:	f9 01       	movw	r30, r18
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e0 50       	subi	r30, 0x00	; 0
 174:	ff 4f       	sbci	r31, 0xFF	; 255
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 176:	64 b1       	in	r22, 0x04	; 4
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ac 01       	movw	r20, r24
 17e:	00 80       	ld	r0, Z
 180:	02 c0       	rjmp	.+4      	; 0x186 <main+0xf0>
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <main+0xec>
 18a:	46 2b       	or	r20, r22
 18c:	44 b9       	out	0x04, r20	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
 18e:	65 b1       	in	r22, 0x05	; 5
 190:	ac 01       	movw	r20, r24
 192:	00 80       	ld	r0, Z
 194:	02 c0       	rjmp	.+4      	; 0x19a <main+0x104>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <main+0x100>
 19e:	46 2b       	or	r20, r22
 1a0:	45 b9       	out	0x05, r20	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 1a2:	64 b1       	in	r22, 0x04	; 4
 1a4:	ac 01       	movw	r20, r24
 1a6:	02 80       	ldd	r0, Z+2	; 0x02
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <main+0x118>
 1aa:	44 0f       	add	r20, r20
 1ac:	55 1f       	adc	r21, r21
 1ae:	0a 94       	dec	r0
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <main+0x114>
 1b2:	46 2b       	or	r20, r22
 1b4:	44 b9       	out	0x04, r20	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
 1b6:	55 b1       	in	r21, 0x05	; 5
 1b8:	bc 01       	movw	r22, r24
 1ba:	02 80       	ldd	r0, Z+2	; 0x02
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <main+0x12c>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	0a 94       	dec	r0
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <main+0x128>
 1c6:	46 2f       	mov	r20, r22
 1c8:	40 95       	com	r20
 1ca:	45 23       	and	r20, r21
 1cc:	45 b9       	out	0x05, r20	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1) & ~(1 << *portNum2);
 1ce:	44 b1       	in	r20, 0x04	; 4
 1d0:	bc 01       	movw	r22, r24
 1d2:	04 80       	ldd	r0, Z+4	; 0x04
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <main+0x144>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <main+0x140>
 1de:	06 80       	ldd	r0, Z+6	; 0x06
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <main+0x150>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <main+0x14c>
 1ea:	86 2b       	or	r24, r22
 1ec:	80 95       	com	r24
 1ee:	84 23       	and	r24, r20
 1f0:	84 b9       	out	0x04, r24	; 4
 1f2:	9f ef       	ldi	r25, 0xFF	; 255
 1f4:	43 ec       	ldi	r20, 0xC3	; 195
 1f6:	89 e0       	ldi	r24, 0x09	; 9
 1f8:	91 50       	subi	r25, 0x01	; 1
 1fa:	40 40       	sbci	r20, 0x00	; 0
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x162>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x16c>
 202:	00 00       	nop
	disconnect(&array[2], &array[3]);
}

//setup the "movement" of the lights
static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
 204:	84 b1       	in	r24, 0x04	; 4
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	84 b9       	out	0x04, r24	; 4
}

static inline void leftToRight(){
	for(int i=0; i<LED_COUNT; i++){
 20a:	2f 5f       	subi	r18, 0xFF	; 255
 20c:	3f 4f       	sbci	r19, 0xFF	; 255
 20e:	2c 30       	cpi	r18, 0x0C	; 12
 210:	31 05       	cpc	r19, r1
 212:	0c f4       	brge	.+2      	; 0x216 <main+0x180>
 214:	a7 cf       	rjmp	.-178    	; 0x164 <main+0xce>
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	23 ed       	ldi	r18, 0xD3	; 211
 21a:	40 e3       	ldi	r20, 0x30	; 48
 21c:	91 50       	subi	r25, 0x01	; 1
 21e:	20 40       	sbci	r18, 0x00	; 0
 220:	40 40       	sbci	r20, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x186>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x190>
 226:	00 00       	nop
 228:	36 cf       	rjmp	.-404    	; 0x96 <main>

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>

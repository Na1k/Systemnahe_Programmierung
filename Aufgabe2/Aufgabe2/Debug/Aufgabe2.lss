
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab1  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c6  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  000013af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	84 b9       	out	0x04, r24	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 b9       	out	0x05, r24	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	84 b9       	out	0x04, r24	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	85 b9       	out	0x05, r24	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1)|~(1 << *portNum2);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x22>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x2c>
  c2:	00 00       	nop
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	84 b9       	out	0x04, r24	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	88 60       	ori	r24, 0x08	; 8
  ce:	85 b9       	out	0x05, r24	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	84 60       	ori	r24, 0x04	; 4
  d4:	84 b9       	out	0x04, r24	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	8b 7f       	andi	r24, 0xFB	; 251
  da:	85 b9       	out	0x05, r24	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1)|~(1 << *portNum2);
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	84 b9       	out	0x04, r24	; 4
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x50>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x5a>
  f0:	00 00       	nop
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	84 b9       	out	0x04, r24	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	85 b9       	out	0x05, r24	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  fe:	84 b1       	in	r24, 0x04	; 4
 100:	81 60       	ori	r24, 0x01	; 1
 102:	84 b9       	out	0x04, r24	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
 104:	85 b1       	in	r24, 0x05	; 5
 106:	8e 7f       	andi	r24, 0xFE	; 254
 108:	85 b9       	out	0x05, r24	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1)|~(1 << *portNum2);
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	84 b9       	out	0x04, r24	; 4
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	83 ed       	ldi	r24, 0xD3	; 211
 112:	90 e3       	ldi	r25, 0x30	; 48
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x7e>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x88>
 11e:	00 00       	nop
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 120:	84 b1       	in	r24, 0x04	; 4
 122:	88 60       	ori	r24, 0x08	; 8
 124:	84 b9       	out	0x04, r24	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
 126:	85 b1       	in	r24, 0x05	; 5
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	85 b9       	out	0x05, r24	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 12c:	84 b1       	in	r24, 0x04	; 4
 12e:	81 60       	ori	r24, 0x01	; 1
 130:	84 b9       	out	0x04, r24	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	85 b9       	out	0x05, r24	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1)|~(1 << *portNum2);
 138:	84 b1       	in	r24, 0x04	; 4
 13a:	84 b9       	out	0x04, r24	; 4
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	83 ed       	ldi	r24, 0xD3	; 211
 140:	90 e3       	ldi	r25, 0x30	; 48
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0xac>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0xb6>
 14c:	00 00       	nop
 14e:	a3 cf       	rjmp	.-186    	; 0x96 <main>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>


Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000206  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0d  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036a  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000292  00000000  00000000  00001cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <main>
  8e:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <applyLED>:
		clearAll();
	}
}

//Apply the configuration of the array LED_STATES
void applyLED(const int* array){
  96:	fc 01       	movw	r30, r24

//FUNCTIONS ---------------------------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW
static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  98:	44 b1       	in	r20, 0x04	; 4
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	c9 01       	movw	r24, r18
  a0:	00 80       	ld	r0, Z
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <applyLED+0x12>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <applyLED+0xe>
  ac:	84 2b       	or	r24, r20
  ae:	84 b9       	out	0x04, r24	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
  b0:	45 b1       	in	r20, 0x05	; 5
  b2:	c9 01       	movw	r24, r18
  b4:	00 80       	ld	r0, Z
  b6:	02 c0       	rjmp	.+4      	; 0xbc <applyLED+0x26>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <applyLED+0x22>
  c0:	84 2b       	or	r24, r20
  c2:	85 b9       	out	0x05, r24	; 5

//FUNCTIONS ---------------------------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW
static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  c4:	44 b1       	in	r20, 0x04	; 4
  c6:	c9 01       	movw	r24, r18
  c8:	02 80       	ldd	r0, Z+2	; 0x02
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <applyLED+0x3a>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <applyLED+0x36>
  d4:	84 2b       	or	r24, r20
  d6:	84 b9       	out	0x04, r24	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
  d8:	95 b1       	in	r25, 0x05	; 5
  da:	a9 01       	movw	r20, r18
  dc:	02 80       	ldd	r0, Z+2	; 0x02
  de:	02 c0       	rjmp	.+4      	; 0xe4 <applyLED+0x4e>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <applyLED+0x4a>
  e8:	84 2f       	mov	r24, r20
  ea:	80 95       	com	r24
  ec:	89 23       	and	r24, r25
  ee:	85 b9       	out	0x05, r24	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1) & ~(1 << *portNum2);
  f0:	44 b1       	in	r20, 0x04	; 4
  f2:	b9 01       	movw	r22, r18
  f4:	04 80       	ldd	r0, Z+4	; 0x04
  f6:	02 c0       	rjmp	.+4      	; 0xfc <applyLED+0x66>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <applyLED+0x62>
 100:	c9 01       	movw	r24, r18
 102:	06 80       	ldd	r0, Z+6	; 0x06
 104:	02 c0       	rjmp	.+4      	; 0x10a <applyLED+0x74>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <applyLED+0x70>
 10e:	86 2b       	or	r24, r22
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	84 b9       	out	0x04, r24	; 4
	CLEAR_BIT(PORTB, *portNum1);					//to not enable the pull-up resistor
 116:	95 b1       	in	r25, 0x05	; 5
 118:	a9 01       	movw	r20, r18
 11a:	04 80       	ldd	r0, Z+4	; 0x04
 11c:	02 c0       	rjmp	.+4      	; 0x122 <applyLED+0x8c>
 11e:	44 0f       	add	r20, r20
 120:	55 1f       	adc	r21, r21
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <applyLED+0x88>
 126:	84 2f       	mov	r24, r20
 128:	80 95       	com	r24
 12a:	89 23       	and	r24, r25
 12c:	85 b9       	out	0x05, r24	; 5
	CLEAR_BIT(PORTB, *portNum2);					//on the Input-Ports
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	06 80       	ldd	r0, Z+6	; 0x06
 132:	02 c0       	rjmp	.+4      	; 0x138 <applyLED+0xa2>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <applyLED+0x9e>
 13c:	20 95       	com	r18
 13e:	28 23       	and	r18, r24
 140:	25 b9       	out	0x05, r18	; 5
 142:	08 95       	ret

00000144 <leftToRight>:
	leftToRight();
	_delay_ms(1000);
}

//setup the "movement" of the lights
void leftToRight(){
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
	for(int i=0; i<LED_COUNT; i++){
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	18 c0       	rjmp	.+48     	; 0x17e <leftToRight+0x3a>
		applyLED(LED_STATES[i]);
 14e:	ce 01       	movw	r24, r28
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	80 50       	subi	r24, 0x00	; 0
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	0e 94 4b 00 	call	0x96	; 0x96 <applyLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	83 ec       	ldi	r24, 0xC3	; 195
 168:	99 e0       	ldi	r25, 0x09	; 9
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <leftToRight+0x26>
 172:	00 c0       	rjmp	.+0      	; 0x174 <leftToRight+0x30>
 174:	00 00       	nop
}

static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
 176:	84 b1       	in	r24, 0x04	; 4
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	84 b9       	out	0x04, r24	; 4
	_delay_ms(1000);
}

//setup the "movement" of the lights
void leftToRight(){
	for(int i=0; i<LED_COUNT; i++){
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	cc 30       	cpi	r28, 0x0C	; 12
 180:	d1 05       	cpc	r29, r1
 182:	2c f3       	brlt	.-54     	; 0x14e <leftToRight+0xa>
		applyLED(LED_STATES[i]);
		_delay_ms(200);
		clearAll();
	}
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <rightToLeft>:

void rightToLeft(){
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
	for(int i=(LED_COUNT-1); i>=0; i--){
 18e:	cb e0       	ldi	r28, 0x0B	; 11
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	18 c0       	rjmp	.+48     	; 0x1c4 <rightToLeft+0x3a>
		applyLED(LED_STATES[i]);
 194:	ce 01       	movw	r24, r28
 196:	88 0f       	add	r24, r24
 198:	99 1f       	adc	r25, r25
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	80 50       	subi	r24, 0x00	; 0
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	0e 94 4b 00 	call	0x96	; 0x96 <applyLED>
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	83 ec       	ldi	r24, 0xC3	; 195
 1ae:	99 e0       	ldi	r25, 0x09	; 9
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <rightToLeft+0x26>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <rightToLeft+0x30>
 1ba:	00 00       	nop
 1bc:	84 b1       	in	r24, 0x04	; 4
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	84 b9       	out	0x04, r24	; 4
		clearAll();
	}
}

void rightToLeft(){
	for(int i=(LED_COUNT-1); i>=0; i--){
 1c2:	21 97       	sbiw	r28, 0x01	; 1
 1c4:	dd 23       	and	r29, r29
 1c6:	34 f7       	brge	.-52     	; 0x194 <rightToLeft+0xa>
		applyLED(LED_STATES[i]);
		_delay_ms(200);
		clearAll();
	}
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <mainloop>:
	}
}


void mainloop(){
	rightToLeft();
 1ce:	0e 94 c5 00 	call	0x18a	; 0x18a <rightToLeft>
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	83 ed       	ldi	r24, 0xD3	; 211
 1d6:	90 e3       	ldi	r25, 0x30	; 48
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <mainloop+0xa>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <mainloop+0x14>
 1e2:	00 00       	nop
	_delay_ms(1000);
	leftToRight();
 1e4:	0e 94 a2 00 	call	0x144	; 0x144 <leftToRight>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	83 ed       	ldi	r24, 0xD3	; 211
 1ec:	90 e3       	ldi	r25, 0x30	; 48
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <mainloop+0x20>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <mainloop+0x2a>
 1f8:	00 00       	nop
 1fa:	08 95       	ret

000001fc <main>:

int main(void)
{
	while (1) 
    {
		mainloop();
 1fc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mainloop>
 200:	fd cf       	rjmp	.-6      	; 0x1fc <main>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>

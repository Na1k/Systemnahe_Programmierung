
Aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  000002de  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b81  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000703  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033f  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000421  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000294  00000000  00000000  00001e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000020e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ed       	ldi	r30, 0xDE	; 222
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	88 60       	ori	r24, 0x08	; 8
  9a:	84 b9       	out	0x04, r24	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	85 b9       	out	0x05, r24	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
  a2:	84 b1       	in	r24, 0x04	; 4
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	84 b9       	out	0x04, r24	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	8b 7f       	andi	r24, 0xFB	; 251
  ac:	85 b9       	out	0x05, r24	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1) & ~(1 << *portNum2);
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	8c 7f       	andi	r24, 0xFC	; 252
  b2:	84 b9       	out	0x04, r24	; 4
	CLEAR_BIT(PORTB, *portNum1);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	85 b9       	out	0x05, r24	; 5
	CLEAR_BIT(PORTB, *portNum2);
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	83 ed       	ldi	r24, 0xD3	; 211
  c4:	90 e3       	ldi	r25, 0x30	; 48
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x30>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3a>
  d0:	00 00       	nop
	disconnect(&array[2], &array[3]);
}

//setup the "movement" of the lights
static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	80 7f       	andi	r24, 0xF0	; 240
  d6:	84 b9       	out	0x04, r24	; 4
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	89 e6       	ldi	r24, 0x69	; 105
  dc:	98 e1       	ldi	r25, 0x18	; 24
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x48>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x52>
  e8:	00 00       	nop
		clearAll();
	}
}

static inline void rightToLeft(){
	for(int i=(LED_COUNT-1); i>=0; i--){
  ea:	4b e0       	ldi	r20, 0x0B	; 11
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	6c c0       	rjmp	.+216    	; 0x1c8 <main+0x132>
		applyLED(LED_STATES[i]);
  f0:	fa 01       	movw	r30, r20
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e0 50       	subi	r30, 0x00	; 0
 100:	ff 4f       	sbci	r31, 0xFF	; 255
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 102:	64 b1       	in	r22, 0x04	; 4
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	9c 01       	movw	r18, r24
 10a:	00 80       	ld	r0, Z
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x7c>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0x78>
 116:	26 2b       	or	r18, r22
 118:	24 b9       	out	0x04, r18	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
 11a:	65 b1       	in	r22, 0x05	; 5
 11c:	9c 01       	movw	r18, r24
 11e:	00 80       	ld	r0, Z
 120:	02 c0       	rjmp	.+4      	; 0x126 <main+0x90>
 122:	22 0f       	add	r18, r18
 124:	33 1f       	adc	r19, r19
 126:	0a 94       	dec	r0
 128:	e2 f7       	brpl	.-8      	; 0x122 <main+0x8c>
 12a:	26 2b       	or	r18, r22
 12c:	25 b9       	out	0x05, r18	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 12e:	64 b1       	in	r22, 0x04	; 4
 130:	9c 01       	movw	r18, r24
 132:	02 80       	ldd	r0, Z+2	; 0x02
 134:	02 c0       	rjmp	.+4      	; 0x13a <main+0xa4>
 136:	22 0f       	add	r18, r18
 138:	33 1f       	adc	r19, r19
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <main+0xa0>
 13e:	26 2b       	or	r18, r22
 140:	24 b9       	out	0x04, r18	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
 142:	35 b1       	in	r19, 0x05	; 5
 144:	bc 01       	movw	r22, r24
 146:	02 80       	ldd	r0, Z+2	; 0x02
 148:	02 c0       	rjmp	.+4      	; 0x14e <main+0xb8>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <main+0xb4>
 152:	26 2f       	mov	r18, r22
 154:	20 95       	com	r18
 156:	23 23       	and	r18, r19
 158:	25 b9       	out	0x05, r18	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1) & ~(1 << *portNum2);
 15a:	64 b1       	in	r22, 0x04	; 4
 15c:	dc 01       	movw	r26, r24
 15e:	04 80       	ldd	r0, Z+4	; 0x04
 160:	02 c0       	rjmp	.+4      	; 0x166 <main+0xd0>
 162:	aa 0f       	add	r26, r26
 164:	bb 1f       	adc	r27, r27
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <main+0xcc>
 16a:	9c 01       	movw	r18, r24
 16c:	06 80       	ldd	r0, Z+6	; 0x06
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0xde>
 170:	22 0f       	add	r18, r18
 172:	33 1f       	adc	r19, r19
 174:	0a 94       	dec	r0
 176:	e2 f7       	brpl	.-8      	; 0x170 <main+0xda>
 178:	2a 2b       	or	r18, r26
 17a:	20 95       	com	r18
 17c:	26 23       	and	r18, r22
 17e:	24 b9       	out	0x04, r18	; 4
	CLEAR_BIT(PORTB, *portNum1);
 180:	35 b1       	in	r19, 0x05	; 5
 182:	bc 01       	movw	r22, r24
 184:	04 80       	ldd	r0, Z+4	; 0x04
 186:	02 c0       	rjmp	.+4      	; 0x18c <main+0xf6>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <main+0xf2>
 190:	26 2f       	mov	r18, r22
 192:	20 95       	com	r18
 194:	23 23       	and	r18, r19
 196:	25 b9       	out	0x05, r18	; 5
	CLEAR_BIT(PORTB, *portNum2);
 198:	25 b1       	in	r18, 0x05	; 5
 19a:	06 80       	ldd	r0, Z+6	; 0x06
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <main+0x10c>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <main+0x108>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	83 ec       	ldi	r24, 0xC3	; 195
 1b0:	99 e0       	ldi	r25, 0x09	; 9
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x11c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x126>
 1bc:	00 00       	nop
	disconnect(&array[2], &array[3]);
}

//setup the "movement" of the lights
static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
 1be:	84 b1       	in	r24, 0x04	; 4
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	84 b9       	out	0x04, r24	; 4
		clearAll();
	}
}

static inline void rightToLeft(){
	for(int i=(LED_COUNT-1); i>=0; i--){
 1c4:	41 50       	subi	r20, 0x01	; 1
 1c6:	51 09       	sbc	r21, r1
 1c8:	55 23       	and	r21, r21
 1ca:	0c f0       	brlt	.+2      	; 0x1ce <main+0x138>
 1cc:	91 cf       	rjmp	.-222    	; 0xf0 <main+0x5a>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	83 ed       	ldi	r24, 0xD3	; 211
 1d2:	90 e3       	ldi	r25, 0x30	; 48
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x13e>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x148>
 1de:	00 00       	nop
static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
}

static inline void leftToRight(){
	for(int i=0; i<LED_COUNT; i++){
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	6c c0       	rjmp	.+216    	; 0x2be <main+0x228>
		applyLED(LED_STATES[i]);
 1e6:	fa 01       	movw	r30, r20
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	e0 50       	subi	r30, 0x00	; 0
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 1f8:	64 b1       	in	r22, 0x04	; 4
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	9c 01       	movw	r18, r24
 200:	00 80       	ld	r0, Z
 202:	02 c0       	rjmp	.+4      	; 0x208 <main+0x172>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <main+0x16e>
 20c:	26 2b       	or	r18, r22
 20e:	24 b9       	out	0x04, r18	; 4
}
static inline void switchOn(const int* portNum){	//set Port HIGH
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
 210:	65 b1       	in	r22, 0x05	; 5
 212:	9c 01       	movw	r18, r24
 214:	00 80       	ld	r0, Z
 216:	02 c0       	rjmp	.+4      	; 0x21c <main+0x186>
 218:	22 0f       	add	r18, r18
 21a:	33 1f       	adc	r19, r19
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <main+0x182>
 220:	26 2b       	or	r18, r22
 222:	25 b9       	out	0x05, r18	; 5
//END OF INCLUDE/CONST/DEFINE ---------------------------------

//set Ports as Output/Input, set Ports HIGH/LOW

static inline void setOutput(const int* portNum){	//Output
	DDRB |= (1 << *portNum);
 224:	64 b1       	in	r22, 0x04	; 4
 226:	9c 01       	movw	r18, r24
 228:	02 80       	ldd	r0, Z+2	; 0x02
 22a:	02 c0       	rjmp	.+4      	; 0x230 <main+0x19a>
 22c:	22 0f       	add	r18, r18
 22e:	33 1f       	adc	r19, r19
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <main+0x196>
 234:	26 2b       	or	r18, r22
 236:	24 b9       	out	0x04, r18	; 4
	setOutput(portNum);
	SET_BIT(PORTB, *portNum);
}
static inline void switchOff(const int* portNum){	//set Port LOW
	setOutput(portNum);
	CLEAR_BIT(PORTB, *portNum);
 238:	35 b1       	in	r19, 0x05	; 5
 23a:	bc 01       	movw	r22, r24
 23c:	02 80       	ldd	r0, Z+2	; 0x02
 23e:	02 c0       	rjmp	.+4      	; 0x244 <main+0x1ae>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <main+0x1aa>
 248:	26 2f       	mov	r18, r22
 24a:	20 95       	com	r18
 24c:	23 23       	and	r18, r19
 24e:	25 b9       	out	0x05, r18	; 5
}
static inline void disconnect(const int* portNum1, const int* portNum2){	//set Port as Input
	DDRB &= ~(1 << *portNum1) & ~(1 << *portNum2);
 250:	64 b1       	in	r22, 0x04	; 4
 252:	dc 01       	movw	r26, r24
 254:	04 80       	ldd	r0, Z+4	; 0x04
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0x1c6>
 258:	aa 0f       	add	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	0a 94       	dec	r0
 25e:	e2 f7       	brpl	.-8      	; 0x258 <main+0x1c2>
 260:	9c 01       	movw	r18, r24
 262:	06 80       	ldd	r0, Z+6	; 0x06
 264:	02 c0       	rjmp	.+4      	; 0x26a <main+0x1d4>
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <main+0x1d0>
 26e:	2a 2b       	or	r18, r26
 270:	20 95       	com	r18
 272:	26 23       	and	r18, r22
 274:	24 b9       	out	0x04, r18	; 4
	CLEAR_BIT(PORTB, *portNum1);
 276:	35 b1       	in	r19, 0x05	; 5
 278:	bc 01       	movw	r22, r24
 27a:	04 80       	ldd	r0, Z+4	; 0x04
 27c:	02 c0       	rjmp	.+4      	; 0x282 <main+0x1ec>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <main+0x1e8>
 286:	26 2f       	mov	r18, r22
 288:	20 95       	com	r18
 28a:	23 23       	and	r18, r19
 28c:	25 b9       	out	0x05, r18	; 5
	CLEAR_BIT(PORTB, *portNum2);
 28e:	25 b1       	in	r18, 0x05	; 5
 290:	06 80       	ldd	r0, Z+6	; 0x06
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0x202>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	0a 94       	dec	r0
 29a:	e2 f7       	brpl	.-8      	; 0x294 <main+0x1fe>
 29c:	80 95       	com	r24
 29e:	82 23       	and	r24, r18
 2a0:	85 b9       	out	0x05, r24	; 5
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	83 ec       	ldi	r24, 0xC3	; 195
 2a6:	99 e0       	ldi	r25, 0x09	; 9
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x212>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x21c>
 2b2:	00 00       	nop
	disconnect(&array[2], &array[3]);
}

//setup the "movement" of the lights
static inline void clearAll(){
	DDRB &= ~(1 << P0) & ~(1 << P1) & ~(1 << P2) & ~(1 << P3);
 2b4:	84 b1       	in	r24, 0x04	; 4
 2b6:	80 7f       	andi	r24, 0xF0	; 240
 2b8:	84 b9       	out	0x04, r24	; 4
}

static inline void leftToRight(){
	for(int i=0; i<LED_COUNT; i++){
 2ba:	4f 5f       	subi	r20, 0xFF	; 255
 2bc:	5f 4f       	sbci	r21, 0xFF	; 255
 2be:	4c 30       	cpi	r20, 0x0C	; 12
 2c0:	51 05       	cpc	r21, r1
 2c2:	0c f4       	brge	.+2      	; 0x2c6 <main+0x230>
 2c4:	90 cf       	rjmp	.-224    	; 0x1e6 <main+0x150>
 2c6:	2f ef       	ldi	r18, 0xFF	; 255
 2c8:	83 ed       	ldi	r24, 0xD3	; 211
 2ca:	90 e3       	ldi	r25, 0x30	; 48
 2cc:	21 50       	subi	r18, 0x01	; 1
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	e1 f7       	brne	.-8      	; 0x2cc <main+0x236>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <main+0x240>
 2d6:	00 00       	nop
 2d8:	08 cf       	rjmp	.-496    	; 0xea <main+0x54>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>


sitzung3-pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a6  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ff  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000131c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d9  00000000  00000000  00001705  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <dimUp>:
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void dimUp(){
	for(int i=0; i<255;i+=10){
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0b c0       	rjmp	.+22     	; 0x9c <dimUp+0x1c>
		OCR0A = (uint8_t)i;
  86:	87 bd       	out	0x27, r24	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	31 ee       	ldi	r19, 0xE1	; 225
  8c:	44 e0       	ldi	r20, 0x04	; 4
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	40 40       	sbci	r20, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <dimUp+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <dimUp+0x18>
  98:	00 00       	nop
#define F_CPU 16000000UL
#include <avr/io.h>
#include <util/delay.h>

void dimUp(){
	for(int i=0; i<255;i+=10){
  9a:	0a 96       	adiw	r24, 0x0a	; 10
  9c:	8f 3f       	cpi	r24, 0xFF	; 255
  9e:	91 05       	cpc	r25, r1
  a0:	94 f3       	brlt	.-28     	; 0x86 <dimUp+0x6>
		OCR0A = (uint8_t)i;
		_delay_ms(100);
	}
	
}
  a2:	08 95       	ret

000000a4 <dimDown>:

void dimDown(){
	for(int i=255; i>0; i-=10){
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0b c0       	rjmp	.+22     	; 0xc0 <dimDown+0x1c>
		OCR0A = (uint8_t)i;
  aa:	87 bd       	out	0x27, r24	; 39
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	31 ee       	ldi	r19, 0xE1	; 225
  b0:	44 e0       	ldi	r20, 0x04	; 4
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	30 40       	sbci	r19, 0x00	; 0
  b6:	40 40       	sbci	r20, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <dimDown+0xe>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <dimDown+0x18>
  bc:	00 00       	nop
	}
	
}

void dimDown(){
	for(int i=255; i>0; i-=10){
  be:	0a 97       	sbiw	r24, 0x0a	; 10
  c0:	18 16       	cp	r1, r24
  c2:	19 06       	cpc	r1, r25
  c4:	94 f3       	brlt	.-28     	; 0xaa <dimDown+0x6>
		OCR0A = (uint8_t)i;
		_delay_ms(100);
	}
}
  c6:	08 95       	ret

000000c8 <main>:

int main(void)
{
	DDRD |= (1 << DDD6);
  c8:	8a b1       	in	r24, 0x0a	; 10
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8a b9       	out	0x0a, r24	; 10
	// PD6 is now an output

	OCR0A = 0;
  ce:	17 bc       	out	0x27, r1	; 39
	// set PWM for 50% duty cycle


	TCCR0A |= (1 << COM0A1);
  d0:	84 b5       	in	r24, 0x24	; 36
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	84 bd       	out	0x24, r24	; 36
	// set none-inverting mode

	TCCR0A |= (1 << WGM01) | (1 << WGM00);
  d6:	84 b5       	in	r24, 0x24	; 36
  d8:	83 60       	ori	r24, 0x03	; 3
  da:	84 bd       	out	0x24, r24	; 36
	// set fast PWM Mode

	TCCR0B |= (1 << CS01);
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 bd       	out	0x25, r24	; 37
	// set prescaler to 8 and starts PWM


	while (1)
	{
		dimUp();
  e2:	0e 94 40 00 	call	0x80	; 0x80 <dimUp>
		dimDown();
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <dimDown>
  ea:	fb cf       	rjmp	.-10     	; 0xe2 <main+0x1a>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
